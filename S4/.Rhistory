knitr::include_graphics("logoPUCP.png")
library(rio)
data="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/urban.xlsx"
urban=import(data)
library(rio)
data="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/urban.xlsx"
urban=import(data)
library(readr)
parse_number(x = "$139,100 32")
parse_number(urban$URBANIZATION)
library(stringr)
library(magrittr) # para %>%
urban$pop_urb3=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,1]%>%parse_number()
urban$rate_urb3=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,2]%>%parse_number()
View(urban)
View(urban)
x= "$139,100"
substr(x,start=4,stop=8)
x= "$139,100"
substr(x,start=2,stop=4)
porcentajes=c('13%','33%','55%')
gsub('%',"",porcentajes) # lo reemplaza por nada ''.
library(rvest)
url="https://www.filmaffinity.com/es/ranking.php?rn=ranking_fa_movies"
pagina_web=read_html(url)
library(rvest)
url="https://www.filmaffinity.com/es/ranking.php?rn=ranking_fa_movies"
pagina_web=read_html(url)
css_nombre="div.mc-title"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_director="div.mc-director"
director_html <- html_nodes(pagina_web,css_director)
director_texto <- html_text(director_html)
head(director_texto)
css_cast="div.mc-cast" # contenemos la clase CSS en un objeto
cast_html <- html_nodes(pagina_web,css_cast) # con html_nodes y html_text, obtenemos el código html que contiene los países
cast_texto <- html_text(cast_html)
head(cast_texto) #vemos los datos
css_data="li.data" # contenemos la clase CSS en un objeto
data_html <- html_nodes(pagina_web,css_data) # con html_nodes y html_text, obtenemos el código html que contiene los países
data_texto <- html_text(data_html)
head(data_texto) #vemos los datos
data_movies <- data.frame(NOMBRE = nombre_texto, DIRECTOR = director_texto, CAST = cast_texto, POINTS = data_texto)
head(data_movies)
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies$YEAR
data_movies[3]
data_movies$DIR1 = str_split(data_movies$CAST,
', ',
simplify = T)[,1]
data_movies$DIR2 = str_split(data_movies$CAST,
', ',
simplify = T)[,2]
data_movies$DIR3 = str_split(data_movies$CAST,
', ',
simplify = T)[,3]
data_movies$DIR4 = str_split(data_movies$CAST,
', ',
simplify = T)[,4]
data_movies$DIR5 = str_split(data_movies$CAST,
', ',
simplify = T)[,5]
data_movies$DIR6 = str_split(data_movies$CAST,
', ',
simplify = T)[,6]
data_movies$DIR7 = str_split(data_movies$CAST,
', ',
simplify = T)[,7]
data_movies$DIR8 = str_split(data_movies$CAST,
', ',
simplify = T)[,8]
data_movies$DIR9 = str_split(data_movies$CAST,
', ',
simplify = T)[,9]
str_split(data_movies$CAST,
', ',
simplify = T)
data_movies[4]
str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*")
data_movies$USUARIOS = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,3] #Todo en el tercer vector
data_movies$PUNTAJE1 = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,1]
data_movies$PUNTAJE2 = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,2]
data_movies$PUNTAJE = paste(data_movies$PUNTAJE1, data_movies$PUNTAJE2, sep = ",")
data_movies = data_movies[,-c(3,4,16,17)]
View(data_movies)
gsub(',|\\$|\\?',"Alex","$139,100?")
#A la derecha:
stringr::str_pad("$139100", 10, side = "right", pad = 0)
#A la izquierda
stringr::str_pad("$139100", 10, side = "left", pad = 0)
knitr::include_graphics("base3.png")
dataMov = import("https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/reporte-3.xlsX")
dataMov = import("https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/reporte-3.xlsX")
View(dataMov)
dataMov = dataMov[,c(2:6)]
dataMov = dataMov[-c(1:5,1880:1883),]
dataMov = dataMov[,c(2:6)]
dataMov = dataMov[,c(2:6)]
dataMov = import("https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/reporte-3.xlsX")
dataMov = dataMov[,c(2:6)]
dataMov = dataMov[-c(1:5,1880:1883),]
View(dataMov)
colnames(dataMov) = c("UBIGEO","UBI","NO_NAC","SI_VIV","NO_VIV")
dataMov$DISTRITO=str_split(dataMov$UBI,'distrito: ',simplify = T) [,2]
dataMov$UBI=str_split(dataMov$UBI,'distrito: ',simplify = T) [,1]
dataMov$REGION=str_split(dataMov$UBI,', ',simplify = T)[,1]
dataMov$PROVINCIA=str_split(dataMov$UBI,', ',simplify = T)[,2]
dataMov$UBIGEO=stringr::str_pad(dataMov$UBIGEO, 6, side = "left", pad = 0)
dataMov = dataMov[,c(1,7,8,6,3,4,5)]
dataMov[,5:7]=lapply(dataMov[,5:7], as.numeric)
str(dataMov)
dataMov$TOTAL_POB = dataMov$NO_NAC+dataMov$SI_VIV+dataMov$NO_VIV
dataMov$TASA_MOV = dataMov$NO_VIV/dataMov$TOTAL_POB
dataMov$UBIGEO_REG = substr(dataMov$UBIGEO,1,2)
dataMov$UBIGEO_REG=stringr::str_pad(dataMov$UBIGEO_REG, 6, side = "right", pad = 0)
dataMov$UBIGEO_PROV = substr(dataMov$UBIGEO,1,4)
dataMov$UBIGEO_PROV=stringr::str_pad(dataMov$UBIGEO_PROV, 6, side = "right", pad = 0)
knitr::include_graphics("dplyr.jpg")
data="https://github.com/WendyAdrianzenRossi/Statistics/raw/main/Data_sample.xlsx"
base=import(data)
library(dplyr)
library(dplyr)
View(base)
knitr::include_graphics("select.png")
select(base, MES_DESEMBOLSO, MONEDA)
select(base, -MONEDA)
select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO)
datos <- select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO)
head(datos,10)
knitr::include_graphics("filter.png")
filter(base, MONTO_DESEMBOLSO>1000000)
filter(base, MONTO_DESEMBOLSO>1000000)
filter(base, MONTO_DESEMBOLSO>1000000 & MONEDA=="Dólares")
base<- filter(base, !is.na(MONTO_DESEMBOLSO))
sum(is.na(base$MONTO_DESEMBOLSO))
base <- mutate(base, montoxtasa=MONTO_DESEMBOLSO*TASA_DESEMBOLSO)
base <- mutate(base, categoria=ifelse(montoxtasa<28473.43,"menor", "mayor"))
table(base$categoria)
base <- mutate(base, montoxtasa=MONTO_DESEMBOLSO*TASA_DESEMBOLSO,
categoria=ifelse(montoxtasa<28473.43,"menor", "mayor"))
base <- arrange(base, MONTO_DESEMBOLSO, montoxtasa)
base <- arrange(base, desc(MONTO_DESEMBOLSO), desc(montoxtasa))
data="https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/corruption.csv"
corru=import(data)
data2="https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/demo.csv"
demo=import(data2)
View(demo)
View(corru)
knitr::include_graphics("merge.png")
names(corru)
names(demo)
# eliminando
corru$Rank=NULL
demo$Rank=NULL
#La columna Score de la tabla democ podriamos cambiar para no olvidar qué representa:
colnames(demo)[2]='ScoreDemo'
#Hay una column Region en las dos bases, quedémonos con la de democracia:
corru$Region=NULL
corrgdp=merge(corru,demo)
str(corrgdp)
corrgdp2=merge(corru,demo,all=TRUE)
str(corrgdp2)
corrgdp3=merge(corru,demo,all.x = TRUE)
str(corrgdp3)
View(corrgdp3)
corrgdp4=merge(corru,demo,all.y = TRUE)
str(corrgdp4)
library(dplyr)
data_resultado1=left_join(corru,demo,by="Country") #left_join Prioriza las filas de la primera base de datos
head(data_resultado1)
data_resultado2=right_join(corru,demo,by="Country") #right_join Prioriza las filas de la segunda base de datos.
head(data_resultado2)
data_resultado3=inner_join(corru,demo,by="Country") #inner_join Prioriza las filas que COINCIDEN en ambas fillas base de
head(data_resultado3)
data_resultado4=full_join(corru,demo,by="Country") #full_join PPrioriza las filas que están en ambas fillas base de datos
head(data_resultado4)
knitr::include_graphics("base1.png")
data="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_ex4.xlsx"
ejercicio=import(data)
View(ejercicio)
head(ejercicio)
names(ejercicio)
ejercicio2 <- select(ejercicio, Altura (m s. n. m.), Nombre, Coordenadas)
colnames(ejercicio$`Altura (m s. n. m.)`) = c("Altura")
colnames(ejercicio$Altura (m s. n. m.)) = c("Altura")
colnames(ejercicio$`Altura (m s. n. m.)`) = c("Altura")
datos <- select(ejercicio, 'Altura (m s. n. m.)', Nombre, Coordenadas)
View(datos)
ejercicio2 <- select(ejercicio, 'Altura (m s. n. m.)', Nombre, Coordenadas)
datos <- select(base, MES_DESEMBOLSO:TASA_DESEMBOLSO)
head(datos,10)
ejercicio2 <- select(ejercicio, 'Altura (m s. n. m.)', Nombre, Coordenadas)
head(ejercicio, 10)
View(ejercicio)
View(ejercicio2)
ejercicio2 <- select(ejercicio, 'Altura (m s. n. m.)', Nombre, Coordenadas)
head(ejercicio2, 10)
ejercicio2 <- select(ejercicio, Nombre, País, 'Altura (m s. n. m.)', Coordenadas)
head(ejercicio2, 10)
str_split(string = ejercicio2$`Altura (m s. n. m.)`,
pattern = '( )',
simplify = T)[,1]
str_split(string = ejercicio2$`Altura (m s. n. m.)`,
+           pattern = '( )',
str_split(string = ejercicio2$`Altura (m s. n. m.)`,
+           pattern = '( )',
str_split(string = ejercicio2$`Altura (m s. n. m.)`,
+           pattern = '()',
substr(ejercicio2$`Altura (m s. n. m.)`,start=7,stop=12)
ejercicio2 <- mutate(ejercicio2, Pies=substr(ejercicio2$`Altura (m s. n. m.)`,start=7,stop=12))
ejercicio2$`Altura (m s. n. m.)`=NULL
ejercicio2 <- mutate(ejercicio2, GLA=substr(ejercicio2$Coordenadas,start=1,stop=2))
ejercicio2 <- mutate(ejercicio2, MLA=substr(ejercicio2$Coordenadas,start=4,stop=5))
ejercicio2 <- mutate(ejercicio2, SLA=substr(ejercicio2$Coordenadas,start=7,stop=8))
str_extract_all(string = ejercicio2$Coordenadas,
pattern= ' ",
simplify = T)[,1]
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern= ' ",
+                 simplify = T)[,1]
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern= ' ",
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern= '",
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern= ' S,
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern= S,
str_extract_all(string = ejercicio2$Coordenadas,
+                 pattern = ,
str_split(urban$pop_urb2, '", simplify = T)
str_split(ejercicio2$Coordenadas, '", simplify = T)
str_split(ejercicio2$Coordenadas, "' ", simplify = T)
