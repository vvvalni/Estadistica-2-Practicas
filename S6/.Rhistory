head(dataWS4)
View(dataWS4)
url="https://www.gob.pe/institucion/mef/funcionarios"
pagina_web=read_html(url)
css_nombre="h3.text-2xl"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
css_cargo="p"
cargo_html <- html_nodes(pagina_web,css_cargo)
cargo_texto <- html_text(cargo_html)
dataWS5 <- data.frame(NOMBRE = nombre_texto, CARGO = cargo_texto)
head(dataWS5)
url="https://www.gob.pe/institucion/mef/funcionarios?sheet="
css_cargo="p"
css_name="h3.text-2xl"
final_table = list() # list es una función para crear listas
library(dplyr)
for(i in 1:4) { # INPUT
webpage <- read_html(paste0(url, i)) #obtenemos el código html de las 3 páginas
cargo_texto <- webpage %>%
html_nodes(css_cargo) %>% # obtener el código html del css del cargo
html_text() # lo convertimos en un vector de texto
name_texto <- webpage %>%
html_nodes(css_name) %>% # obtener el código html del css del name
html_text() # lo convertimos en un vector de texto
final_table[[i]] <- data.frame(NOMBRE=name_texto, CARGO=cargo_texto) # OUTPUT: Con esto estamos creando una lista con 3 data frames que contenga las 3 páginas scrapeadas
}
dataWS6 = bind_rows(final_table)
head(dataWS6)
View(dataWS6)
url="https://www.imdb.com/chart/top/?ref_=nv_mv_250&sort=user_rating%2Cdesc"
pagina_web=read_html(url)
css_nombre="h3.ipc-title__text" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
css_nombre="a.ipc-title-link-wrapper" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
css_nombre="span.sc-b85248f1-6.bnDqKN.cli-title.metadata-item" # contenemos la clase CSS en un objeto
nombre_html <- html_nodes(pagina_web,css_nombre) # con html_nodes y html_text, obtenemos el código html que contiene los nombres
nombre_texto <- html_text(nombre_html)
head(nombre_texto) #vemos los datos
url="https://www.congreso.gob.pe/pleno/congresistas/?=undefined&m1_idP="
css_nombre="a.conginfo"
css_grupo="span.partidolist"
final_table = list() # list es una función para crear listas
library(dplyr)
for(i in 1:13) { # INPUT
webpage <- read_html(paste0(url, i)) #obtenemos el código html de las 3 páginas
grupo_texto <- webpage %>%
html_nodes(css_grupo) %>% # obtener el código html del css del cargo
html_text() # lo convertimos en un vector de texto
name_texto <- webpage %>%
html_nodes(css_nombre) %>% # obtener el código html del css del name
html_text() # lo convertimos en un vector de texto
final_table[[i]] <- data.frame(NOMBRE=name_texto, GRUPO=grupo_texto) # OUTPUT: Con esto estamos creando una lista con 3 data frames que contenga las 3 páginas scrapeadas
}
dataWS7 = bind_rows(final_table)
head(dataWS7)
View(dataWS7)
knitr::include_graphics("logoPUCP.png")
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/finalData.csv")
library(rio)
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/finalData.csv")
View(dataols)
names(dataols)
dataols = dataols[,c(15,1,3,6,9,4)]
View(dataols)
View(dataols)
colnames(dataols) = c("Vote","Dist","Ubigeo","Disc","Pobre","Pop")
dataols$Dic_porc = dataols$Disc/dataols$Pop
View(dataols)
dataols$Pobre_porc = dataols$Pobre/dataols$Pop
library(rio)
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/finalData.csv")
dataols = dataols[,c(15,1,3,6,9,4)]
colnames(dataols) = c("Vote","Dist","Ubigeo","Disc","Pobre","Pop")
dataols$Dic_porc = dataols$Disc/dataols$Pop
View(dataols)
reg_ols = lm(Vote ~ Dic_porc + Pobre, data = dataols)
summary(reg_ols)
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/fin alData.csv")
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/finalData.csv")
View(dataols)
names(dataols)
dataols = dataols[,c(15,1,3,6,9,4,7)]
colnames(dataols) = c("Vote","Dist","Ubigeo","Disc","Pobre","Pop","IVA")
dataols$Dic_porc = dataols$Disc/dataols$Pop
mean(dataols$IVA)
dataols$IVA_cat = factor(ifelse(dataols$IVA>0.173227,1,0))
View(dataols)
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA_cat, data = dataols)
summary(reg_ols1)
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA, data = dataols)
summary(reg_ols1)
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA_cat, data = dataols)
summary(reg_ols1)
knitr::include_graphics("logoPUCP.png")
library(rio)
dataols = import("https://github.com/Alexanderbenit7/ERM2018/raw/master/finalData.csv")
dataols = dataols[,c(15,1,3,6,9,4,7,8)]
colnames(dataols) = c("Vote","Dist","Ubigeo","Disc","Pobre","Pop","IVA", "IDH")
dataols$Dic_porc = dataols$Disc/dataols$Pop
dataols$IVA_cat = factor(ifelse(dataols$IVA>0.173227,1,0))
View(dataols)
reg_ols = lm(Vote ~ Dic_porc + Pobre, data = dataols)
summary(reg_ols)
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA_cat + IDH, data = dataols)
summary(reg_ols1)
reg_ols = lm(Vote ~ Dic_porc + Pobre, data = dataols)
summary(reg_ols)
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA_cat, data = dataols)
summary(reg_ols1)
library(magrittr)
library(knitr)
tanova=anova(reg_ols,reg_ols1,reg3)
library(magrittr)
library(knitr)
tanova=anova(reg_ols,reg_ols1)
kable(tanova,
caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(lm.beta)
model3beta=list('apropiacion (III)'=lm.beta(reg_ols))
modelsummary(model3beta, title = "Regresion: modelo 1 con \ncoeficientes estandarizados usando lm.beta()",
stars = TRUE,
output = "kableExtra")
library(lm.beta)
library(kableExtra)
library(lm.beta)
model3beta=list('apropiacion (III)'=lm.beta(reg_ols))
modelsummary(model3beta, title = "Regresion: modelo 1 con \ncoeficientes estandarizados usando lm.beta()",
stars = TRUE,
output = "kableExtra")
library(modelsummary)
library(knitr)
tanova=anova(reg_ols,reg_ols1)
kable(tanova,
caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
library(modelsummary)
library(lm.beta)
model3beta=list('apropiacion (III)'=lm.beta(reg_ols))
modelsummary(model3beta, title = "Regresion: modelo 1 con \ncoeficientes estandarizados usando lm.beta()",
stars = TRUE,
output = "kableExtra")
library(modelsummary)
library(lm.beta)
model3beta=list('apropiacion (III)'=lm.beta(reg_ols1))
modelsummary(model3beta, title = "Regresion: modelo 1 con \ncoeficientes estandarizados usando lm.beta()",
stars = TRUE,
output = "kableExtra")
reg_ols1 = lm(scale(Vote) ~ scale(Dic_porc) + scale(Pobre) + scale(IVA_cat), data = dataols)
reg_ols1 = lm(scale(Vote) ~ scale(Dic_porc) + scale(Pobre) + scale(IVA_cat), data = dataols)
reg_ols1 = lm(scale(Vote) ~ scale(Dic_porc) + scale(Pobre) + scale(IVA_cat), data = dataols)
reg_ols1 = lm(Vote ~ scale(Dic_porc) + scale(Pobre) + scale(IVA_cat), data = dataols)
reg_ols1 = lm(scale(Vote) ~ scale(Dic_porc) + scale(Pobre) + scale(as.numeric(IVA_cat)), data = dataols)
summary(reg_ols1)
modelo_st=list('Voto estandarizado' = reg_ols1)
modelsummary(modelo_st, title = "Regresion: modelo con \ncoeficientes estandarizados",
stars = TRUE,
output = "kableExtra")
plot(reg_ols1)
plot(reg_ols1,1)
plot(reg_ols1, 2)
plot(reg_ols1, 3)
library(lmtest)
library(kableExtra)
# null: modelo homocedastico
resBP=bptest(reg_ols1)
data.frame(list('BP'=resBP$statistic,
'df'=resBP$parameter,
"p-value"=resBP$p.value))%>%
kable(caption = resBP$method)%>%kable_styling(full_width = F)
library(lmtest)
bptest(reg_ols1)
reg_ols1_st = lm(scale(Vote) ~ scale(Dic_porc) + scale(Pobre) + scale(as.numeric(IVA_cat)), data = dataols)
summary(reg_ols1_st)
modelo_st=list('Voto estandarizado' = reg_ols1_st)
modelsummary(modelo_st, title = "Regresion: modelo con \ncoeficientes estandarizados",
stars = TRUE,
output = "kableExtra")
reg_ols1 = lm(Vote ~ Dic_porc + Pobre + IVA_cat, data = dataols)
summary(reg_ols1)
plot(reg_ols1,1)
plot(reg_ols1, 3)
library(lmtest)
bptest(reg_ols1)
plot(reg_ols1, 2)
shapiro.test(reg_ols1$residuals)
hist(reg_ols1$residuals)
library(DescTools)
VIF(reg_ols1)
plot(reg_ols1, 5)
mean(reg_ols1$residuals)
check = as.data.frame(influence.measures(reg_ols1)$is.inf)
head(check)
check[check$cook.d & check$hat,]
View(check)
library(rio)
data=import("https://github.com/gabrielramost/Estadistica2/blob/main/IOP_1119_01_02_D.sav?raw=true")
data = import("Base - Nacional.sav")
subdata = data[,c(2,4,5,7,8,15,16,29,82,57,58:63)]
colnames(subdata) = c("SEX","EDAD1","EDAD2","ESTUDIOS1","ESTUDIOS2","VIVIR_FUERA",
"FAM_FUERA","BARRIO","NOTICIAS","M_APARIENCIA","M_AMIGABLE",
"M_COQUETA","M_OPORTUNISTA","M_SEGURA","M_PROMISCUA","M_ATRACTIVA")
subdata$M_APARIENCIA = ifelse(subdata$M_APARIENCIA == "Sí",100,0)
subdata$M_AMIGABLE = ifelse(subdata$M_AMIGABLE == "Sí, bastante",100,0)
subdata$M_COQUETA = ifelse(subdata$M_COQUETA == "Sí, bastante",100,0)
subdata$M_OPORTUNISTA = ifelse(subdata$M_OPORTUNISTA == "Sí, bastante",100,0)
subdata$M_SEGURA = ifelse(subdata$M_SEGURA == "Sí, bastante",100,0)
subdata$M_PROMISCUA = ifelse(subdata$M_PROMISCUA == "Sí, bastante",100,0)
subdata$M_ATRACTIVA = ifelse(subdata$M_ATRACTIVA == "Sí, bastante",100,0)
View(subdata)
data = import("Base - Nacional.sav")
subdata = data[,c(2,4,5,7,8,15,16,29,82,57,58:63)]
colnames(subdata) = c("SEX","EDAD1","EDAD2","ESTUDIOS1","ESTUDIOS2","VIVIR_FUERA",
"FAM_FUERA","BARRIO","NOTICIAS","M_APARIENCIA","M_AMIGABLE",
"M_COQUETA","M_OPORTUNISTA","M_SEGURA","M_PROMISCUA","M_ATRACTIVA")
subdata$M_APARIENCIA = ifelse(subdata$M_APARIENCIA == "Sí",1,0)
subdata$M_AMIGABLE = ifelse(subdata$M_AMIGABLE == "Sí, bastante",1,0)
subdata$M_COQUETA = ifelse(subdata$M_COQUETA == "Sí, bastante",1,0)
subdata$M_OPORTUNISTA = ifelse(subdata$M_OPORTUNISTA == "Sí, bastante",1,0)
subdata$M_SEGURA = ifelse(subdata$M_SEGURA == "Sí, bastante",1,0)
subdata$M_PROMISCUA = ifelse(subdata$M_PROMISCUA == "Sí, bastante",1,0)
subdata$M_ATRACTIVA = ifelse(subdata$M_ATRACTIVA == "Sí, bastante",1,0)
subdata$vd = subdata$M_APARIENCIA + subdata$M_OPORTUNISTA + subdata$M_PROMISCUA
hist(subdata$vd)
subdata$vd = subdata$M_APARIENCIA + subdata$M_OPORTUNISTA + subdata$M_PROMISCUA + subdata$M_COQUETA
hist(subdata$vd)
table(subdata$SEX)
subdata = subdata[subdata$SEX == "Hombre" |
subdata$SEX == "Mujer",]
subdata$SEX = factor(subdata$SEX, levels = c(0,1), labels = c("Mujer","Hombre"))
table(subdata$SEX)
data = import("Base - Nacional.sav")
subdata = data[,c(2,4,5,7,8,15,16,29,82,57,58:63)]
colnames(subdata) = c("SEX","EDAD1","EDAD2","ESTUDIOS1","ESTUDIOS2","VIVIR_FUERA",
"FAM_FUERA","BARRIO","NOTICIAS","M_APARIENCIA","M_AMIGABLE",
"M_COQUETA","M_OPORTUNISTA","M_SEGURA","M_PROMISCUA","M_ATRACTIVA")
subdata$M_APARIENCIA = ifelse(subdata$M_APARIENCIA == "Sí",1,0)
subdata$M_AMIGABLE = ifelse(subdata$M_AMIGABLE == "Sí, bastante",1,0)
subdata$M_COQUETA = ifelse(subdata$M_COQUETA == "Sí, bastante",1,0)
subdata$M_OPORTUNISTA = ifelse(subdata$M_OPORTUNISTA == "Sí, bastante",1,0)
subdata$M_SEGURA = ifelse(subdata$M_SEGURA == "Sí, bastante",1,0)
subdata$M_PROMISCUA = ifelse(subdata$M_PROMISCUA == "Sí, bastante",1,0)
subdata$M_ATRACTIVA = ifelse(subdata$M_ATRACTIVA == "Sí, bastante",1,0)
subdata$vd = subdata$M_APARIENCIA + subdata$M_OPORTUNISTA + subdata$M_PROMISCUA + subdata$M_COQUETA
subdata = subdata[subdata$SEX == "Hombre" |
subdata$SEX == "Mujer",]
subdata$SEX = ifelse(subdata$SEX == "Hombre",1,0)
subdata$SEX = factor(subdata$SEX, levels = c(0,1), labels = c("Mujer","Hombre"))
table(subdata$SEX)
str(subdata$SEX)
str(subdata$EDAD1)
table(subdata$BARRIO)
#Comparte el barrio con personas venezolanas:
subdata$BARRIO[subdata$BARRIO == "No sabe / Prefiere no responder"] = NA
subdata$BARRIO = ifelse(subdata$BARRIO == "Sí",1,0)
subdata$BARRIO = factor(subdata$BARRIO, levels = c(0:1), labels = c("No", "Sí"))
table(subdata$BARRIO)
#Exposición a medios de comunicación:
subdata$NOTICIAS[subdata$NOTICIAS == "No sabe / Prefiere no responder"] = NA
subdata$NOTICIAS = ifelse(subdata$NOTICIAS == "Nunca",1,
ifelse(subdata$NOTICIAS == "Una vez al mes",2,
ifelse(subdata$NOTICIAS == "Una vez a la semana",3,
ifelse(subdata$NOTICIAS == "3 veces a la semana aprox.",4,
ifelse(subdata$NOTICIAS == "Todos los días",5,0)))))
subdata$NOTICIAS = factor(subdata$NOTICIAS, levels = c(1:5),
labels = c("Nunca","Una vez al mes","Una vez a la semana",
"Tres veces a la semana","Todos los días"))
subdata=dummy_cols(subdata, select_columns = c("NOTICIAS"))
library(fastDummies)
subdata=dummy_cols(subdata, select_columns = c("NOTICIAS"))
names(subdata)
colnames(subdata)[18] = "NUNCA"
colnames(subdata)[19] = "UNA_MES"
colnames(subdata)[20] = "UNA_SEMANA"
colnames(subdata)[21] = "TRES_SEMANA"
colnames(subdata)[22] = "TODOS_DIAS"
names(subdata)
rp1=glm(vd ~ BARRIO, data = subdata, family = poisson(link = "log"))
rp2=glm(vd ~ BARRIO + SEX, data = subdata, family = poisson(link = "log"))
rp3=glm(vd ~ BARRIO + SEX + TODOS_DIAS, data = subdata, family = poisson(link = "log"))
# displaying results
modelslmpoi=list('POISSON 1'=rp1,
'POISSON 2'=rp2,
'POISSON 3'=rp3)
modelsummary(modelslmpoi, title = "Regresiones Poisson",
stars = TRUE,
output = "kableExtra")
# displaying results
modelslmpoi=list('POISSON 1'=rp1,
'POISSON 2'=rp2,
'POISSON 3'=rp3)
modelsummary(modelslmpoi, title = "Regresiones Poisson",
stars = TRUE,
output = "kableExtra")
modelsummary(modelslmpoi, title = "Regresiones Poisson",
stars = TRUE,
statistic = 'conf.int',
exponentiate = T, # exponenciar!!!!!
output = "kableExtra")
barrio=coef(rp2)[['BARRIOSí']] #Personas venezolanas en el barrio
E_barrio=exp(barrio)
(CambioBarrio=100*(E_barrio))
E_barrio
1-116.7723
1-1.167723
1-1.167723*-1
100*0.167723
E_barrio
1-E_barrio
1-1.016
exp(coef(rp2)[['BARRIOSí']]) #Personas venezolanas en el barrio
-25*(-1)
1-1.016
100*0.016
1-1.167723
exp_rp2 = 1-1.167723
exp_rp2
100*exp_rp2
exp_rp2 = exp_rp2*-1
exp_rp2
100*exp_rp2
exp(coef(rp3)[['TODOS_DIAS']])
exp_rp3 = 1-1.425909
exp_rp3 = exp_rp2*-1
exp_rp3 = 1-1.425909
exp_rp3 = exp_rp3*-1
exp_rp3
exp_rp3*100
library(magrittr)
overdispersion=AER::dispersiontest(rp3,alternative='greater')$ p.value<0.05
underdispersion=AER::dispersiontest(rp3,alternative='less')$ p.value<0.05
# tabla
testResult=as.data.frame(rbind(overdispersion,underdispersion))
names(testResult)='Es probable?'
testResult%>%kable(caption = "Test de Equidispersión")%>%kableExtra::kable_styling()
rqp = glm(vd ~ BARRIO + SEX + TODOS_DIAS, data = subdata,
family = quasipoisson(link = "log"))
modelsPQP=list('POISSON'=rp3,'QUASIPOISSON'=rqp)
modelsummary(modelsPQP,
title = "Regresiones Poisson y QuasiPoisson",
stars = TRUE,
output = "kableExtra")
library(arm)
cbind(se_Poi=se.coef(rp4),se_QuasiPoi=se.coef(rqp))
library(arm)
cbind(se_Poi=se.coef(rp3),se_QuasiPoi=se.coef(rqp))
anova(rp2, rp3,rqp, test = "Chisq") %>%
kable(caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
anova(rp3,rqp, test = "Chisq") %>%
kable(caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
iop=import("https://github.com/gabrielramost/Estadistica2/blob/main/IOP_0717_01_D.sav?raw=true")
table(subdata$M_APARIENCIA)
dep=subdata$M_APARIENCIA # a la fila
ind=subdata$SEX # a la columna
NarrsexTable=table(dep,ind,dnn = c('Narrative','Gender'))
### suma por fila y columna
addmargins(NarrsexTable)%>%
kable(caption = "Tabla de Contingencia: 'Sexo' y 'Ser Voluntario'")%>%
kableExtra::kable_styling(full_width = F)
dep=subdata$M_APARIENCIA # a la fila
ind=subdata$SEX # a la columna
NarrsexTable=table(dep,ind,dnn = c('Narrative','Gender'))
### suma por fila y columna
addmargins(NarrsexTable)%>%
kable(caption = "Tabla de Contingencia: 'Sexo' y 'Creer la narrativa'")%>%
kableExtra::kable_styling(full_width = F)
dep=subdata$M_APARIENCIA # a la fila
ind=subdata$SEX # a la columna
NarrsexTable=table(dep,ind,dnn = c('Narrative','Gender'))
### suma por fila y columna
addmargins(NarrsexTable)%>%
kable(caption = "Tabla de Contingencia: 'Género' y 'Creer la narrativa'")%>%
kableExtra::kable_styling(full_width = F)
ProbMujNarr=NarrsexTable[2,1]/sum(NarrsexTable[,1])
MASS::fractions(ProbMujVol)
ProbMujNarr=NarrsexTable[2,1]/sum(NarrsexTable[,1])
MASS::fractions(NarrMujVol)
ProbMujNarr=NarrsexTable[2,1]/sum(NarrsexTable[,1])
MASS::fractions(ProbMujNarr)
ProbMujNarr
ProbMujNarr=NarrsexTable[2,1]/sum(NarrsexTable[,1])
MASS::fractions(ProbMujNarr)
ProbMujNarr
OddsMujNarr=NarrsexTable[2,1]/NarrsexTable[1,1]
MASS::fractions(OddsMujNarr)
OddsMujNarr
ProbMujNarr/1-ProbMujNarr
ProbMujNarr/(1-ProbMujNarr)
ProbHombNarr=NarrsexTable[2,2]/sum(NarrsexTable[,2])
MASS::fractions(ProbHombNarr)
OddsHombNarr = ProbHombNarr/(1-ProbHombNarr)
(OR_MujHom=OddsMujNarr/OddsHombNarr)
mosaicplot( t(NarrsexTable),col = c("orange", "green"),main = "")
set.seed(2023)
### first hypothesis
h1=formula(M_APARIENCIA~SEX)
#regression
rlog1=glm(h1, data=vol,subdata = binomial)
set.seed(2023)
### first hypothesis
h1=formula(M_APARIENCIA~SEX)
#regression
rlog1=glm(h1, data=subdata,family = binomial)
modelrl=list('Trabajo por su apariencia'=rlog1)
#f <- function(x) format(x, digits = 4, scientific = FALSE)
library(modelsummary)
modelsummary(modelrl,
title = "Regresión Logística",
stars = TRUE,
output = "kableExtra")
1-1.28
1-0.95
na,es(subdata)
names(subdata)
h1=formula(M_APARIENCIA ~ SEX + EDAD1)
h2=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA)
h2=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA + TODOS_DIAS)
h1=formula(M_APARIENCIA ~ SEX + EDAD1)
h2=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA)
h3=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA + TODOS_DIAS)
rlog1=glm(h1, data=subdata,family = binomial)
rlog2=glm(h2, data=subdata,family = binomial)
rlog3=glm(h3, data=subdata,family = binomial)
modelsrl=list('Adhesión (I)'=rlog1,
'Adhesión (II)'=rlog2,
'Adhesión (III)'=rlog3)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
str(subdata$VIVIR_FUERA)
subdata$VIVIR_FUERA = ifelse(subdata$VIVIR_FUERA == "Sí",1,0)
subdata$VIVIR_FUERA = factor(subdata$VIVIR_FUERA, levels = c(0:1), labels = c("No", "Sí"))
str(subdata$VIVIR_FUERA)
h1=formula(M_APARIENCIA ~ SEX + EDAD1)
h2=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA)
h3=formula(M_APARIENCIA ~ SEX + EDAD1 + VIVIR_FUERA + TODOS_DIAS)
rlog1=glm(h1, data=subdata,family = binomial)
rlog2=glm(h2, data=subdata,family = binomial)
rlog3=glm(h3, data=subdata,family = binomial)
modelsrl=list('Adhesión (I)'=rlog1,
'Adhesión (II)'=rlog2,
'Adhesión (III)'=rlog3)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
summary(rlog1)
summary(rlog2)
summary(rlog3)
summary(rlog3)
ToInput1 <- data.frame(SEX=factor(c("Hombre")),
EDAD1=50, TODOS_DIAS=1)
predict(object = rlog3, newdata = ToInput1, type = "response")
marginalsData=summary(margins(rlog3))
library(margins)
marginalsData=summary(margins(rlog3))
marginalsData%>% kable(caption = "Efectos Marginales Promedio (AME)- Modelo III") %>%kableExtra::kable_styling(full_width = T)
library(survival)
library(survminer)
head(lung)
summary(lung$time)
#Recodificamos para que 0 sea la ocurrencia:
lung$status1 = ifelse(lung$status == 2,1,0)
table(lung$status1)
lung$survival=with(lung,Surv(time = time,
event =  status1))
library(ggplot2)
library(ggfortify)
KM.generico = survfit(survival ~ 1, data = lung)
ejeX='DAYS\n Curva cae cuando ocurre un fallecimiento'
ejeY='Probabilidad \n(Sobrevivir)'
titulo="Curva de Sobrevivencia"
autoplot(KM.generico,xlab=ejeX,ylab=ejeY, main = titulo,conf.int = F)
KM_H1=formula(survival ~ sex)
KM.sex = survfit(KM_H1, data = lung)
###
ejeX='DAYS\n Curva cae cuando ocurre un fallecimiento'
ejeY='Probabilidad \n(Sobrevivir)'
titulo="Curva de Sobrevivencia"
autoplot(KM.sex,xlab=ejeX,ylab=ejeY,
main = titulo,conf.int = F)  +
labs(colour = "Impacto del género") +
scale_color_discrete(labels = c("Hombre", "Mujer"))
LogRank=survdiff(KM_H1, data = lung)
LogRank$pvalue
autoplot(KM.sex,xlab=ejeX,ylab=ejeY,
main = titulo,conf.int = T)+
labs(colour = "Impacto del género") +
scale_color_discrete(labels = c("Hombre", "Mujer"))
COX_H1= formula(survival~factor(sex)+age)
rcox1 <- coxph(COX_H1,data=lung)
summary(rcox1)
(sex=abs(1-exp(coef(rcox1)[1])))
library(lmtest)
lrtest(rlog1,rlog2, rlog3) %>%
kable(caption = "Tabla LRT para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
(sex=abs(1-exp(coef(rcox1)[1])))
