install.packages("rio")
install.packages("ggplot2")
install.packages("toolbox")
install.packages("DescTools")
setwd("D:/Guardar/PUCP/2023-2/Estadística para el Análisis Político 2")
library(rio)
link="https://docs.google.com/spreadsheets/d/e/2PACX-1vTzMYKzJiKqe8fuBQ7GfPjpQ7nuR4aoPLEWjvARBNSiDTHBKmHgJBxpIjR5ueG15l6IP7wVaTBP_eNg/pub?gid=0&single=true&output=csv"
myData=read.csv(link)
str(myData)
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
str(myData)
library(rio)
link="https://docs.google.com/spreadsheets/d/e/2PACX-1vTzMYKzJiKqe8fuBQ7GfPjpQ7nuR4aoPLEWjvARBNSiDTHBKmHgJBxpIjR5ueG15l6IP7wVaTBP_eNg/pub?gid=0&single=true&output=csv"
data=read.csv(link)
library(rio)
link="https://docs.google.com/spreadsheets/d/e/2PACX-1vTzMYKzJiKqe8fuBQ7GfPjpQ7nuR4aoPLEWjvARBNSiDTHBKmHgJBxpIjR5ueG15l6IP7wVaTBP_eNg/pub?gid=0&single=true&output=csv"
data=read.csv(link)
link=" https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_2021_voting_final.xlsx"
data=read.csv(link)
library(rio)
link=" https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_2021_voting_final.xlsx"
data=read.csv(link)
library(rio)
link="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_2021_voting_final.xlsx"
data=read.csv(link)
str(data)
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
library(rio)
link="https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_2021_voting_final.xlsx"
data=read.csv(link)
library(rio)
link=import("https://github.com/Alexanderbenit7/EAP2_2023-2/raw/main/data/data_2021_voting_final.xlsx")
data=read.csv(link)
library(rio)
data = import("data_2021_voting_final.xlsx")
str(data)
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
data$PC_VICT = factor(data$PC_VICT, levels = c(0,1), labels = c("No","Yes"))
str(data)
dep=data$PC_VICT # a la fila
ind=data$PRIOR # a la columna
pcTable=table(dep,ind,dnn = c('PC_VICT','PRIOR'))
### suma por fila y columna
addmargins(pcTable)%>%
kable(caption = "Tabla de Contingencia: 'PRIOR' y 'GANO PC'")%>%
kableExtra::kable_styling(full_width = F)
library(tables)
dep=data$PC_VICT # a la fila
ind=data$PRIOR # a la columna
pcTable=table(dep,ind,dnn = c('PC_VICT','PRIOR'))
### suma por fila y columna
addmargins(pcTable)%>%
kable(caption = "Tabla de Contingencia: 'PRIOR' y 'GANO PC'")%>%
kableExtra::kable_styling(full_width = F)
library(summarytools)
library(kableExtra)
dep=data$PC_VICT # a la fila
ind=data$PRIOR # a la columna
pcTable=table(dep,ind,dnn = c('PC_VICT','PRIOR'))
### suma por fila y columna
addmargins(pcTable)%>%
kable(caption = "Tabla de Contingencia: 'PRIOR' y 'GANO PC'")%>%
kableExtra::kable_styling(full_width = F)
ProbPrio=pcTable[2,2]/sum(volsexTable[,2])
ProbPrio=pcTable[2,2]/sum(pcTable[,2])
MASS::fractions(ProbPrio)
ProbPrio=565/690
MASS::fractions(ProbPrio)
ProbPrio=565/690
ProbPrio
OddsPrio=565/125
OddsPrio
OddsPrio=ProbPrio/(1-ProbPrio)
OddsPrio
OddsPrio=ProbPrio/(1-ProbPrio)
OddsPrio
set.seed(2023)
h1=formula(PC_VICT~TASA_INDIGENA + TASA_NOLEER + PRIOR)
rlog1=glm(h1, data=myData,family = binomial)
rlog1=glm(h1, data=data,family = binomial)
summary(rlog1)
h2 =formula(PC_VICT~TASA_INDIGENA)
rlog2 = glm(h2, data=data,family = binomial)
summary(rlog2)
rlog1=glm(h1, data=data,family = binomial)
summary(rlog1)
ProbPrio=565/690
ProbPrio
OddsPrio=ProbPrio/(1-ProbPrio)
OddsPrio
set.seed(2023)
h1=formula(PC_VICT~TASA_INDIGENA + TASA_NOLEER + PRIOR)
rlog1=glm(h1, data=data,family = binomial)
summary(rlog1)
h2 =formula(PC_VICT~TASA_INDIGENA)
rlog2 = glm(h2, data=data,family = binomial)
summary(rlog2)
exp(coef(rlog1))
exp(coef(rlog2))
valorprom = (100 x |1-8.06|)
valorprom = (100 * |1-8.06|)
100*round(abs(1-exp(coef(rlog1)["TASA_INDIGENA"])),4)
library(rio)
data = import("data_2021_voting_final.xlsx")
str(data)
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
data$PC_VICT = factor(data$PC_VICT, levels = c(0,1), labels = c("No","Yes"))
str(data)
ProbPrio=565/690
ProbPrio
OddsPrio=ProbPrio/(1-ProbPrio)
OddsPrio
set.seed(2023)
set.seed(2023)
h1=formula(PC_VICT~TASA_INDIGENA + TASA_NOLEER + PRIOR)
rlog1=glm(h1, data=data,family = binomial)
summary(rlog1)
h2 =formula(PC_VICT~TASA_INDIGENA)
rlog2 = glm(h2, data=data,family = binomial)
summary(rlog2)
exp(coef(rlog1))
exp(coef(rlog2))
100*round(abs(1-exp(coef(rlog1)["TASA_INDIGENA"])),4)
modelsrl=list('Ser Voluntario (I)'=rlog1)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
library(magrittr)
modelsrl=list('Ser Voluntario (I)'=rlog1)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
library(modelsummary)
modelsrl=list('Ser Voluntario (I)'=rlog1)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
library(rio)
data = import("data_2021_voting_final.xlsx")
str(data)
data$PRIOR = factor(data$PRIOR, levels = c(0,1), labels = c("NoPriorizado","Priorizado"))
data$PC_VICT = factor(data$PC_VICT, levels = c(0,1), labels = c("No","Yes"))
str(data)
str(data)
ProbPrio=565/690
ProbPrio
OddsPrio=ProbPrio/(1-ProbPrio)
OddsPrio
set.seed(2023)
h1=formula(PC_VICT~TASA_INDIGENA + TASA_NOLEER + PRIOR)
rlog1=glm(h1, data=data,family = binomial)
summary(rlog1)
library(modelsummary)
modelsrl=list('Ser Voluntario (I)'=rlog1)
# formato creado para modelsummary
formatoNumero = function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelsrl,
fmt=formatoNumero, # usa función que creé antes
exponentiate = T, # coeficientes sin logaritmo
statistic = 'conf.int', # mostrar ICs
title = "Regresión Logísticas (Coeficientes Exponenciados)",
stars = TRUE,
output = "kableExtra")
sdVIs=apply(data[,c("TASA_INDIGENA","TASA_NOLEER", "PRIOR")],2,sd)
DF=list(LogitSt=sdVIs*coef(rlog1)[c(2,3,4)])%>%
data.frame()
# DF tiene los coeficientes estandarizados
DF%>% kable(caption = "Coeficientes Estandarizados (ordenar vía valores absolutos)")%>%
kableExtra::kable_styling(full_width = F)
library(margins)
margins(rlog1)
exp(coef(rlog1))
library(margins)
margins(rlog1)
library(summarytools)
library(kableExtra)
dep=data$PC_VICT # a la fila
ind=data$PRIOR # a la columna
pcTable=table(dep,ind,dnn = c('PC_VICT','PRIOR'))
### suma por fila y columna
addmargins(pcTable)%>%
kable(caption = "Tabla de Contingencia: 'PRIOR' y 'GANO PC'")%>%
kableExtra::kable_styling(full_width = F)
summary(margins(rlog1))
setwd("C:/Users/VALERIA/OneDrive/Escritorio/Estadistica-2-Practicas")
knitr::include_graphics("logoPUCP.png")
library(rio)
data="https://github.com/WendyAdrianzenRossi/Statistics/raw/main/midata.csv"
urban=import(data)
urban[1,1]
urban[4,1]
urban[10,1]
urban$COUNTRY =trimws(urban$COUNTRY,which=c("right"),whitespace = "[\\h\\v]")
urban[1,1]
urban[1,2]
library(stringr)
str_extract_all(string = '25.3%,0% y 23.5% 13 34 hola 5 6 chau 200',pattern="\\d")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau', pattern = "\\d+") # + es al menos 1
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau', pattern="\\d+\\.*\\d*")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau',pattern = "\\d+\\.*\\d*\\%")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau',pattern = "(\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25.3%,0% y -23.5% 13 34 hola', pattern = "(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][1]
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][2]
urban[4,2]
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][3]
str_extract_all(urban$URBANIZATION,"(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all(urban$URBANIZATION,
"(\\-*\\d+\\.*\\d*)(?=\\%)",
simplify = T)
# Creamos objetos
PATRON="(\\-*\\d+\\.*\\d*)(?=\\%)"
COLSUCIA=urban$URBANIZATION
# UNA COLUMNA
urban$pop_urb=str_extract_all(string = COLSUCIA,
pattern= PATRON,
simplify = T)[,1]
# OTRA COLUMNA
urban$rate_urb=str_extract_all(string = COLSUCIA,
pattern=PATRON,
simplify = T)[,2]
head(urban)
head(urban[-2])
urban[1,2]
str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization: ')
urban$pop_urb2=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,1]
urban$rate_urb2=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,2]
urban$pop_urb2[1]
str_split(urban$pop_urb2, '% of total', simplify = T)
urban$pop_urb2=str_split(urban$pop_urb2,
'% of total',
simplify = T)[,1]
urban$pop_urb2[1]
str_split(urban$pop_urb2,':',simplify = T)
urban$pop_urb2=str_split(urban$pop_urb2,
':',
simplify = T)[,2]
urban$pop_urb2[1]
urban$rate_urb2[1]
urban$rate_urb2=str_split(urban$rate_urb2,
pattern = '%',
simplify = T)[,1]
urban$rate_urb2[1]
{r eval=FALSE, include=FALSE}
head(urban[,-2]
head(urban[,-2])
library(rvest)
url="https://www.filmaffinity.com/es/ranking.php?rn=ranking_fa_movies"
pagina_web=read_html(url)
css_nombre="div.mc-title"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_director="div.mc-director"
director_html <- html_nodes(pagina_web,css_director)
director_texto <- html_text(director_html)
head(director_texto)
css_cast="div.mc-cast" # contenemos la clase CSS en un objeto
cast_html <- html_nodes(pagina_web,css_cast) # con html_nodes y html_text, obtenemos el código html que contiene los países
cast_texto <- html_text(cast_html)
head(cast_texto) #vemos los datos
css_data="li.data" # contenemos la clase CSS en un objeto
data_html <- html_nodes(pagina_web,css_data) # con html_nodes y html_text, obtenemos el código html que contiene los países
data_texto <- html_text(data_html)
head(data_texto) #vemos los datos
data_movies <- data.frame(NOMBRE = nombre_texto, DIRECTOR = director_texto, CAST = cast_texto, POINTS = data_texto)
head(data_movies)
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
View(data_movies)
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies
data_movies[3]
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies$YEAR
data_movies$DIR1 = str_split(data_movies$CAST,
', ',
simplify = T)[,1]
data_movies$DIR2 = str_split(data_movies$CAST,
', ',
simplify = T)[,2]
data_movies$DIR3 = str_split(data_movies$CAST,
', ',
simplify = T)[,3]
data_movies$DIR4 = str_split(data_movies$CAST,
', ',
simplify = T)[,4]
data_movies$DIR5 = str_split(data_movies$CAST,
', ',
simplify = T)[,5]
data_movies$DIR6 = str_split(data_movies$CAST,
', ',
simplify = T)[,6]
data_movies$DIR7 = str_split(data_movies$CAST,
', ',
simplify = T)[,7]
data_movies$DIR8 = str_split(data_movies$CAST,
', ',
simplify = T)[,8]
data_movies$DIR9 = str_split(data_movies$CAST,
', ',
simplify = T)[,9]
View(data_movies)
str_split(data_movies$CAST,
', ',
simplify = T)
data_movies[4]
str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*")
data_movies$USUARIOS = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,3] #Todo en el tercer vector
library(rio)
data="https://github.com/WendyAdrianzenRossi/Statistics/raw/main/midata.csv"
urban=import(data)
urban[10,1]
urban$COUNTRY =trimws(urban$COUNTRY,which=c("right"),whitespace = "[\\h\\v]")
urban[1,1]
urban[1,2]
library(stringr)
str_extract_all(string = '25.3%,0% y 23.5% 13 34 hola 5 6 chau 200',pattern="\\d")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau', pattern = "\\d+") # + es al menos 1
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau', pattern="\\d+\\.*\\d*")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau',pattern = "\\d+\\.*\\d*\\%")
str_extract_all('25.3%,0% y 23.5% 13 34 hola 5 6 chau',pattern = "(\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25.3%,0% y -23.5% 13 34 hola', pattern = "(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][1]
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][2]
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][3]
urban[4,2]
str_extract_all(urban$URBANIZATION,"(\\-*\\d+\\.*\\d*)(?=\\%)")
str_extract_all(urban$URBANIZATION,
"(\\-*\\d+\\.*\\d*)(?=\\%)",
simplify = T)
# Creamos objetos
PATRON="(\\-*\\d+\\.*\\d*)(?=\\%)"
COLSUCIA=urban$URBANIZATION
# UNA COLUMNA
urban$pop_urb=str_extract_all(string = COLSUCIA,
pattern= PATRON,
simplify = T)[,1]
# OTRA COLUMNA
urban$rate_urb=str_extract_all(string = COLSUCIA,
pattern=PATRON,
simplify = T)[,2]
head(urban[-2])
urban[1,2]
str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization: ')
urban$pop_urb2=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,1]
urban$rate_urb2=str_split(string = urban$URBANIZATION,
pattern = 'rate of urbanization:',
simplify = T)[,2]
urban$pop_urb2[1]
str_split(urban$pop_urb2, '% of total', simplify = T)
urban$pop_urb2=str_split(urban$pop_urb2,
'% of total',
simplify = T)[,1]
urban$pop_urb2[1]
str_split(urban$pop_urb2,':',simplify = T)
urban$pop_urb2=str_split(urban$pop_urb2,
':',
simplify = T)[,2]
urban$pop_urb2[1]
urban$rate_urb2[1]
urban$rate_urb2=str_split(urban$rate_urb2,
pattern = '%',
simplify = T)[,1]
urban$rate_urb2[1]
head(urban[,-2])
library(rvest)
url="https://www.filmaffinity.com/es/ranking.php?rn=ranking_fa_movies"
pagina_web=read_html(url)
css_nombre="div.mc-title"
nombre_html <- html_nodes(pagina_web,css_nombre)
nombre_texto <- html_text(nombre_html)
head(nombre_texto)
css_director="div.mc-director"
director_html <- html_nodes(pagina_web,css_director)
director_texto <- html_text(director_html)
head(director_texto)
css_cast="div.mc-cast" # contenemos la clase CSS en un objeto
cast_html <- html_nodes(pagina_web,css_cast) # con html_nodes y html_text, obtenemos el código html que contiene los países
cast_texto <- html_text(cast_html)
head(cast_texto) #vemos los datos
css_data="li.data" # contenemos la clase CSS en un objeto
data_html <- html_nodes(pagina_web,css_data) # con html_nodes y html_text, obtenemos el código html que contiene los países
data_texto <- html_text(data_html)
head(data_texto) #vemos los datos
data_movies <- data.frame(NOMBRE = nombre_texto, DIRECTOR = director_texto, CAST = cast_texto, POINTS = data_texto)
head(data_movies)
data_movies$YEAR = str_extract_all(data_movies$NOMBRE,
"\\d+\\.*\\d*",
simplify = T)[,1]
data_movies$YEAR
data_movies[3]
data_movies$DIR1 = str_split(data_movies$CAST,
', ',
simplify = T)[,1]
data_movies$DIR2 = str_split(data_movies$CAST,
', ',
simplify = T)[,2]
data_movies$DIR3 = str_split(data_movies$CAST,
', ',
simplify = T)[,3]
data_movies$DIR4 = str_split(data_movies$CAST,
', ',
simplify = T)[,4]
data_movies$DIR5 = str_split(data_movies$CAST,
', ',
simplify = T)[,5]
data_movies$DIR6 = str_split(data_movies$CAST,
', ',
simplify = T)[,6]
data_movies$DIR7 = str_split(data_movies$CAST,
', ',
simplify = T)[,7]
data_movies$DIR8 = str_split(data_movies$CAST,
', ',
simplify = T)[,8]
data_movies$DIR9 = str_split(data_movies$CAST,
', ',
simplify = T)[,9]
str_split(data_movies$CAST,
', ',
simplify = T)
data_movies[4]
str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*")
data_movies$USUARIOS = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,3] #Todo en el tercer vector
data_movies$PUNTAJE1 = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,1]
data_movies$PUNTAJE2 = str_extract_all(data_movies$POINTS,pattern = "\\d+\\.*\\d*", simplify = T) [,2]
data_movies$PUNTAJE = paste(data_movies$PUNTAJE1, data_movies$PUNTAJE2, sep = ",")
data_movies = data_movies[,-c(3,4,16,17)]
View(data_movies)
str_split(string = data_movies$NOMBRE,
pattern = '()')
str_split(string = data_movies$NOMBRE,
pattern = " ")
data_attacks = import("data_terror_attacks.xlsx")
setwd("C:/Users/VALERIA/OneDrive/Escritorio/Estadistica-2-Practicas/S3")
data_attacks = import("data_terror_attacks.xlsx")
data_attacks = import("data_terror_atacks.xlsx")
View(data_attacks)
data_attacks[,2]
str_extract_all(data_attacks$Fecha,"(\\-*\\d+\\.*\\d*)"
str_extract_all(data_attacks$Fecha, pattern = "(\\-*\\d+\\.*\\d*)")
str_extract_all('25%, 0% y 23.5%',
"(\\-*\\d+\\.*\\d*)(?=\\%)")[[1]][1]
str_extract_all(data_attacks$Fecha, pattern = "(\\-*\\d+\\.*\\d*)")[[1]][1]
str_extract_all(data_attacks$Fecha, pattern = "(\\-*\\d+\\.*\\d*)", simplify = T)
str_extract_all(data_attacks$Fecha, pattern = "(\\-*\\d+\\.*\\d*)(?=\\-)", simplify = T)
str_extract_all(data_attacks$Fecha, pattern = "(\\-*\\d+\\.*\\d*)", simplify = T)
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,1]
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,1]
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,2]
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,1]
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,2]
str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,3]
data_attacks$Fecha=str_extract_all(data_attacks$Fecha, pattern = "(\\d+\\.*\\d*)", simplify = T)[,1]
