aggregate(data_idh[,c(8,12)], by = list(data_idh[,4]), mean) #idh y pbi per capita
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE), #media
min_idh_reg = min(idh, na.rm = TRUE), #idh mínimo de la región
max_idh_reg = max(idh, na.rm = TRUE), #idh máximo de la región
median_idh = median(idh, na.rm = TRUE)) #mediana
pob_reg=data_idh %>%
group_by(depa) %>%
summarise(pob_reg = sum(pobla, na.rm = T))
pob_reg
ppk_reg=data_idh %>%
group_by(depa) %>%
summarise(ppk_reg = sum(PPK, na.rm = T)) #para los conteos
ppk_reg
total = merge(pob_reg, ppk_reg, by = "depa")
total$prop_ppk = (total$ppk_reg/total$pob_reg)*100
idh_reg = data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
total = merge(total,idh_reg, by = "depa")
plot(total$prop_ppk, total$mean_idh)
dis_reg = data_idh %>%
group_by(depa) %>%
summarise(count = n())
dis_reg
sum(dis_reg$count) #verificamos
knitr::include_graphics("logoPUCP.png")
knitr::include_graphics("formats.png")
library(rvest)
linkToWebIDE="https://en.wikipedia.org/wiki/List_of_national_independence_days"
xpathToTableIDE='//*[@id="mw-content-text"]/div[1]/table[2]'
data <- read_html(linkToWebIDE)%>%html_nodes(xpath = xpathToTableIDE)%>%html_table()%>% .[[1]]
head(data)
data$Date = paste(data$`Date of holiday`,data$`Year of event`)
data[1,8]
data[3,8]
View(data)
Sys.setlocale("LC_TIME")
Sys.setlocale("LC_TIME", "English")
as.Date(data$Date, format = "%d %B %Y")
data$fechas=as.Date(data$Date, format = "%d %B %Y")
str(data)
View(data)
data$act_date = as.Date("2023-11-02", format = "%Y-%m-%d")
head(data)
library(lubridate)
data$ind_years=interval(data$fechas,data$act_date) %/% years(1)
head(data)
data$ind_months=interval(data$fechas,data$act_date) %/% months(1)
data$ind_weeks=interval(data$fechas,data$act_date) %/% weeks(1)
data$ind_days=interval(data$fechas,data$act_date) %/% days(1)
head(data[8:13])
head(data[8:14])
data[which.min(data$ind_years),]
data[which.max(data$ind_years),]
View(data)
View(data)
data = data[-c(93),]
data[which.max(data$ind_years),]
dat1 <- read.csv("http://mgimond.github.io/ES218/Data/CO2.csv")
head(dat1)
View(dat1)
paste(dat1$Year,dat1$Month, sep="-")
paste(dat1$Year, dat1$Month, "15", sep="-")
dat1$nd = ymd(paste(dat1$Year, dat1$Month, "15", sep = "-"))
str(dat1$nd)
library(rio)
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
head(ventanillas)
ventanillas = ventanillas[,c(1,3,6:9)]
str(ventanillas)
names(ventanillas)
colnames(ventanillas) = c("VENTANILLA","TICKET","GENERACION","LLAMADA","ATENCION","FIN")
View(ventanillas)
as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S")
ventanillas$GENER_TEST = as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S")
str(ventanillas$GENER_TEST)
ventanillas$day = ifelse(ventanillas$VENTANILLA == "VENTANILLA 1", "July 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 2", "May 21 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 3", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 4", "June 25 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 5", "June 2 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 6", "July 3 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 7", "May 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 8", "June 26 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 9", "May 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 10", "November 15 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 11", "June 8 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 12", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 13", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 14", "June 29 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 15", "November 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 16", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 17", "May 22 2021",0)))))))))))))))))
ventanillas$gen_fecha = paste(ventanillas$day, ventanillas$GENERACION)
View(ventanillas)
ventanillas$gen_fecha=as.POSIXct(ventanillas$gen_fecha,format="%B %d %Y %H:%M:%S")
str(ventanillas$gen_fecha)
ventanillas$GENERACION = as.POSIXct(ventanillas$GENERACION, format ="%H:%M:%S")
ventanillas$LLAMADA = as.POSIXct(ventanillas$LLAMADA, format ="%H:%M:%S")
ventanillas$ATENCION = as.POSIXct(ventanillas$ATENCION, format ="%H:%M:%S")
ventanillas$FIN = as.POSIXct(ventanillas$FIN, format ="%H:%M:%S")
str(ventanillas)
ventanillas$diff = difftime(ventanillas$FIN,ventanillas$GENERACION, units="min") #seconds si fueran segundos
min(ventanillas$diff)
ventanillas[which.min(ventanillas$diff),]
max(ventanillas$diff)
ventanillas[which.max(ventanillas$diff),]
hist(ventanillas$diff)
str(ventanillas$diff)
as.numeric(ventanillas$diff)
ventanillas$duracion=as.numeric(ventanillas$diff)
hist(ventanillas$duracion)
ventanillas$secs = difftime(ventanillas$FIN,ventanillas$GENERACION, units="seconds")
ventanillas$secs = difftime(ventanillas$FIN,ventanillas$GENERACION, units="secs")
12516/60
1216*60
1256/60
529/60
179/60
table(ventanillas$TICKET)
library(dplyr)
ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
TCIKETS = ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
View(TCIKETS)
TICKETS[which.min(TICKETS$DURACION),]
TICKETS[which.min(TICKETS$DURACION),]
TICKETS = ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
```{r}
TICKETS[which.min(TICKETS$DURACION),]
TICKETS[which.max(TICKETS$DURACION),]
TICKETS[which.min(TICKETS$DURACION),]
ADMIN = filter(TICKETS, grepl("CON", TICKET))
View(ADMIN)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(b37r,0),"%")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(DURACION,0),"mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=TICKET, y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(DURACION,0),"mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
ADMIN = filter(TICKETS, grepl("DJ", TICKET))
library(ggplot2)
ggplot(ADMIN, aes(x=TICKET, y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(DURACION,0),"mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(DURACION,0),"mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
ADMIN = ADMIN[complete.cases(ADMIN$DURACION),]
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 200) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 100) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 100) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 90) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
ventanillas$month=month(ventanillas$GENERACION, label = T)
ventanillas$month=month(ventanillas$GENERACION, label = T)
View(ventanillas)
ventanillas$day=weekdays(ventanillas$GENERACION, label = T)
ventanillas$day=weekdays(ventanillas$GENERACION, abbreviate = F)
View(ventanillas)
#Base original:
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
ventanillas$Fecha = substr(ventanillas$Fecha,1,8)
str(ventanillas$FECHA)
substr(ventanillas$Fecha,1,8)
substr(ventanillas$FECHA,1,8)
ventanillas$Fecha = substr(ventanillas$FECHA,1,7)
substr(ventanillas$FECHA,1,7)
#Base original:
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
knitr::include_graphics("logoPUCP.png")
knitr::include_graphics("formats.png")
library(rvest)
linkToWebIDE="https://en.wikipedia.org/wiki/List_of_national_independence_days"
xpathToTableIDE='//*[@id="mw-content-text"]/div[1]/table[2]'
data <- read_html(linkToWebIDE)%>%html_nodes(xpath = xpathToTableIDE)%>%html_table()%>% .[[1]]
head(data)
data$Date = paste(data$`Date of holiday`,data$`Year of event`)
data[1,8]
as.Date(data$Date, format = "%d %B %Y")
data$fechas=as.Date(data$Date, format = "%d %B %Y")
str(data)
data$act_date = as.Date("2023-11-02", format = "%Y-%m-%d")
head(data)
library(lubridate)
data$ind_years=interval(data$fechas,data$act_date) %/% years(1)
head(data)
data$ind_months=interval(data$fechas,data$act_date) %/% months(1)
data$ind_weeks=interval(data$fechas,data$act_date) %/% weeks(1)
data$ind_days=interval(data$fechas,data$act_date) %/% days(1)
head(data[8:14])
data[which.min(data$ind_years),]
data[which.max(data$ind_years),]
data = data[-c(93),]
data[which.max(data$ind_years),]
dat1 <- read.csv("http://mgimond.github.io/ES218/Data/CO2.csv")
head(dat1)
paste(dat1$Year,dat1$Month, sep="-")
paste(dat1$Year, dat1$Month, "15", sep="-")
knitr::include_graphics("fun.png")
dat1$nd = ymd(paste(dat1$Year, dat1$Month, "15", sep = "-"))
str(dat1$nd)
knitr::include_graphics("hours.png")
library(rio)
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
head(ventanillas)
ventanillas = ventanillas[,c(1,3,6:9)]
str(ventanillas)
names(ventanillas)
colnames(ventanillas) = c("VENTANILLA","TICKET","GENERACION","LLAMADA","ATENCION","FIN")
as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S") #Pone la fecha de hoy por defecto
ventanillas$GENER_TEST = as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S")
str(ventanillas$GENER_TEST)
ventanillas$day = ifelse(ventanillas$VENTANILLA == "VENTANILLA 1", "July 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 2", "May 21 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 3", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 4", "June 25 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 5", "June 2 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 6", "July 3 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 7", "May 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 8", "June 26 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 9", "May 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 10", "November 15 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 11", "June 8 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 12", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 13", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 14", "June 29 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 15", "November 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 16", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 17", "May 22 2021",0)))))))))))))))))
ventanillas$gen_fecha = paste(ventanillas$day, ventanillas$GENERACION)
ventanillas$gen_fecha=as.POSIXct(ventanillas$gen_fecha,format="%B %d %Y %H:%M:%S")
str(ventanillas$gen_fecha)
ventanillas$GENERACION = as.POSIXct(ventanillas$GENERACION, format ="%H:%M:%S")
ventanillas$LLAMADA = as.POSIXct(ventanillas$LLAMADA, format ="%H:%M:%S")
ventanillas$ATENCION = as.POSIXct(ventanillas$ATENCION, format ="%H:%M:%S")
ventanillas$FIN = as.POSIXct(ventanillas$FIN, format ="%H:%M:%S")
str(ventanillas)
ventanillas$diff = difftime(ventanillas$FIN,ventanillas$GENERACION, units="min") #secs si fueran segundos
ventanillas$secs = difftime(ventanillas$FIN,ventanillas$GENERACION, units="secs")
min(ventanillas$diff)
ventanillas[which.min(ventanillas$diff),]
max(ventanillas$diff)
ventanillas[which.max(ventanillas$diff),]
ventanillas$duracion=as.numeric(ventanillas$diff)
hist(ventanillas$duracion)
table(ventanillas$TICKET)
library(dplyr)
TICKETS = ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
TICKETS[which.max(TICKETS$DURACION),]
TICKETS[which.min(TICKETS$DURACION),]
ADMIN = filter(TICKETS, grepl("DJ", TICKET))
ADMIN = ADMIN[complete.cases(ADMIN$DURACION),]
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 90) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
ventanillas$day=weekdays(ventanillas$GENERACION, abbreviate = F)
View(ventanillas)
substr(ventanillas$GENERACION,12,13)
ventanillas$hour = substr(ventanillas$GENERACION,12,13)
tiempos_Fecha = ventanillas %>%
group_by(day, hour) %>%
summarise(ATENCIONES = n ())
View(tiempos_Fecha)
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
ventanillas$FECHA = substr(ventanillas$FECHA,1,8)
names(ventanillas)
ventanillas = ventanillas[,c(1,3,6:9,10)]
colnames(ventanillas) = c("VENTANILLA","TICKET","GENERACION","LLAMADA","ATENCION","FIN","FECHA")
ventanillas$FECHA = substr(ventanillas$FECHA,1,8) #está la fecha de la atención
ventanillas$ATEN = paste(ventanillas$FECHA, ventanillas$GENERACION)
ventanillas$ATEN = paste0(ventanillas$FECHA, ventanillas$GENERACION)
ventanillas$ATEN = paste(ventanillas$FECHA, ventanillas$GENERACION)
as.POSIXct(ventanillas$ATEN,format="%B/%d/%Y %H:%M:%S")
as.POSIXct(ventanillas$ATEN,format="%B/%d/%Y  %H:%M:%S")
as.POSIXct(ventanillas$FECHA,format="%B/%d/%Y  %H:%M:%S")
as.POSIXct(ventanillas$FECHA,format="%B/%d/%Y")
as.POSIXct(ventanillas$FECHA,format="%d/%B/%Y")
as.POSIXct(ventanillas$FECHA,format="%d/%m/%y")
as.POSIXct(ventanillas$ATEN,format="%d/%m/%y %H:%M:%S")
ventanillas$ATEN= as.POSIXct(ventanillas$ATEN,format="%d/%m/%y %H:%M:%S")
ventanillas$day=weekdays(ventanillas$ATEN, abbreviate = F) #nos quedamos con el día
ventanillas$hour = substr(ventanillas$ATEN,12,13) #nos quedamos con la hora
tiempos_Fecha = ventanillas %>%
group_by(day, hour) %>%
summarise(ATENCIONES = n ())
View(tiempos_Fecha)
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = count)) +
geom_tile()
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCION)) +
geom_tile()
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile()
dow_format <- c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
tiempos_Fecha$day <- factor(tiempos_Fecha$day, level = rev(dow_format))
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile()
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm"))
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm")) +
labs(x = "Hora de atencion", y = "Dia de la semana", title = "Numero de atenciones")
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm")) +
labs(x = "Hora de atencion", y = "Dia de la semana", title = "Numero de atenciones")+
scale_fill_gradient(low = "white", high = "#27AE60", labels = comma)
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm")) +
labs(x = "Hora de atencion", y = "Dia de la semana", title = "Numero de atenciones")+
scale_fill_gradient(low = "white", high = "#27AE60")
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm")) +
labs(x = "Hora de atencion", y = "Dia de la semana", title = "Numero de atenciones")+
scale_fill_gradient(low = "white", high = "#27AE60") +
theme(panel.background=element_rect(fill = "white", colour = "black"))+
theme(plot.title = element_text(hjust = 0.5))
data = import("https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/blob/master/DATA/pavimentando%20con%20votos.sav?raw=true")
#Veamos cómo está formateada:
str(data$pctopo)
summary(data$pctopo)
hist(data$pctopo)
data$cortes_pctopo = factor(ifelse(data$pctopo>50,1,0))
data$cortes_pctopo = factor(data$cortes_pctopo, levels = c(0:1), labels = c("La mitad o menos","Más de la mitad")) #Asignando nombres a las categorías
table(data$cortes_pctopo)
barplot(table(data$cortes_pctopo))
library(dplyr)
data = mutate(data, cortes_pctopo_2 = ifelse(pctopo>50,1,0))
data$cortes_pctopo_2 = factor(data$cortes_pctopo_2, levels = c(0:1), labels = c("La mitad o menos","Más de la mitad"))
table(data$cortes_pctopo_2)
data$cat_dob = ifelse(data$pctopo > 50 & data$priorizado == 1, 1, #Ojo que son dos condiciones, por eso el &
ifelse(data$pctopo > 50 & data$priorizado == 0,2,
ifelse(data$pctopo <= 50 & data$priorizado == 1,3,
ifelse(data$pctopo <= 50 & data$priorizado == 0,4,0))))
data$cat_dob = factor(data$cat_dob, levels = c(1:4), labels = c("Más del 50% y priorizado",
"Más del 50% y no priorizado",
"La mitad o menos y priorizado",
"La mitad o menos y no priorizado"))
table(data$cat_dob)
barplot(table(data$cat_dob))
breaks_nbi = c(0,20,40,60,80,100)
labels_nbi = c("Muy insatisfechas","Insatisfechas","Medianamente satisfechas","Satisfechas","Altamente satisfechas")
data$int_nbi = cut(data$nbi,
breaks = breaks_nbi,
labels = labels_nbi,
oredered_result = T)
table(data$int_nbi)
barplot(table(data$int_nbi))
breaks_nbi = 5
labels_nbi = c("Muy insatisfechas","Insatisfechas","Medianamente satisfechas","Satisfechas","Altamente satisfechas")
data$int_nbi = cut(data$nbi,
breaks = breaks_nbi,
labels = labels_nbi,
oredered_result = T)
table(data$int_nbi)
barplot(table(data$int_nbi))
data_idh = import("https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/idh_elec.csv")
prov_idh = tapply(data_idh$idh, data_idh$prov, mean, na.rm = T)
prov_idh = as.data.frame(prov_idh)
prov_idh
reg_idh = tapply(data_idh$idh, data_idh$depa, mean, na.rm = T)
reg_idh = as.data.frame(reg_idh)
reg_idh
reg_idh = tapply(data_idh$idh, data_idh$depa, mean, na.rm = T)
reg_pbi = tapply(data_idh$percapitaf, data_idh$depa, mean, na.rm = T)
group = as.data.frame(cbind(reg_idh, reg_pbi)) #Cuidado cuando hay casos perdidos y usan cbind!!
group
plot(group$reg_idh, group$reg_pbi)
aggregate(data_idh[,c(8)], by = list(data_idh[,4]), mean) #idh
aggregate(data_idh[,c(8,12)], by = list(data_idh[,4]), mean) #idh y pbi per capita
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE), #media
min_idh_reg = min(idh, na.rm = TRUE), #idh mínimo de la región
max_idh_reg = max(idh, na.rm = TRUE), #idh máximo de la región
median_idh = median(idh, na.rm = TRUE)) #mediana
pob_reg=data_idh %>%
group_by(depa) %>%
summarise(pob_reg = sum(pobla, na.rm = T))
pob_reg
ppk_reg=data_idh %>%
group_by(depa) %>%
summarise(ppk_reg = sum(PPK, na.rm = T)) #para los conteos
ppk_reg
total = merge(pob_reg, ppk_reg, by = "depa")
total$prop_ppk = (total$ppk_reg/total$pob_reg)*100
total = merge(pob_reg, ppk_reg, by = "depa")
total$prop_ppk = (total$ppk_reg/total$pob_reg)*100
idh_reg = data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
total = merge(total,idh_reg, by = "depa")
plot(total$prop_ppk, total$mean_idh)
dis_reg = data_idh %>%
group_by(depa) %>%
summarise(count = n())
dis_reg
sum(dis_reg$count) #verificamos
