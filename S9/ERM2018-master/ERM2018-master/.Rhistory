labs(title = "Confianza en los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "Escala 0 - 100") +
geom_text(aes(label=b37r),color="white", size=3)
ggplot(df, aes(x=reorder(pais,b37r), y=b37r), fill = select) +
geom_bar(stat = "identity") +
coord_flip()+
labs(title = "Confianza en los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "Escala 0 - 100") +
geom_hline(yintercept = mean(df$b37r) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(b37r,0),"%")), vjust=0.5, hjust = 1.2,color="white", size=3)
library(ggthemes)
g1 + theme_fivethirtyeight()
g1 = ggplot(df, aes(x=reorder(pais,b37r), y=b37r), fill = select) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin=b37r-ci, ymax=b37r+ci), width= 0.2) +
coord_flip()+
labs(title = "Confianza en los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "Escala 0 - 100") +
geom_hline(yintercept = mean(df$b37r) ,linetype="dashed", color="blue",size=1)+
ylim(0, 80) +
geom_text(aes(label=paste0(round(b37r,0),"%")), vjust=0.5, hjust = -1,color="black", size=3)
g1
library(ggthemes)
g1 + theme_fivethirtyeight()
g1 + theme_economist()
str(lapop$gi0)
table(lapop$gi0)
lapop$gi0r <- car::recode(lapop$gi0, "3:5=0 ; 1:2=100")
table(lapop$gi0r)
df1 <- summarySE(data=lapop, measurevar="gi0r", groupvar="pais", na.rm=T)
df1
df1 <- summarySE(data=lapop, measurevar="gi0r", groupvar="pais", na.rm=T)
df1
df$type = "Trust in media"
df1$type = "Attention to news"
View(df1)
colnames(df)[3] = "value"
colnames(df1)[3] = "value"
dff = rbind(df,df1)
View(dff)
g2 = ggplot(dff, aes(x=reorder(pais,value), y=value, fill = type)) +
geom_bar(position="dodge", stat="identity")+
coord_flip() +
geom_errorbar(aes(ymin=value-ci, ymax=value+ci), position = position_dodge(0.95), width= 0.2) +
labs(title = "Confianza y atención a los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "Escala 0 - 100") +
geom_text(aes(label=paste0(round(value,0),"%")), vjust=0.5, hjust = -0.8,color="black", size=3,
position = position_dodge(width = 1)) +
theme(legend.position="bottom") + labs(fill=' ') #Para la leyenda
g2
g2 + theme_economist()
knitr::include_graphics("bb.png")
#devtools::install_github("jbgb13/peRReo")
library(peRReo)
pal=latin_palette("badbunny2",2,type="continuous")
g2 + scale_fill_manual(values=pal) +
theme_minimal()
library(taylor)
g2 + scale_fill_taylor_d(album="Fearless (Taylor's Version)") +
theme_minimal()
taylor_albums
library(taylor)
g2 + scale_fill_taylor_d(album="Red") +
theme_minimal()
library(taylor)
g2 + scale_fill_taylor_d(album="evermore") +
theme_minimal()
library(taylor)
g2 + scale_fill_taylor_d(album="Red (Taylor's Version)") +
theme_minimal()
library(taylor)
g2 + scale_fill_taylor_d(album="Fearless (Taylor's Version)") +
theme_minimal()
vdem = import("vdemdata.csv")
per = vdem[vdem$country_name == "Peru",] #Nos quedamos con Perú
View(per)
ggplot(per, aes(x=year, y=v2x_polyarchy)) +
geom_line()
ggplot(per, aes(x=year, y=v2x_polyarchy)) +
geom_line() +
labs(title = "Índice de democracia electoral - Perú",
subtitle = "V-Dem",
x = "Año",
y = "Escala 0 - 1") +
guides(col=guide_legend("Grupo:")) +
theme_fivethirtyeight()
library(dplyr)
reg = vdem %>%
group_by(year) %>%
summarise(democracy = mean(v2x_polyarchy, na.rm = T))
reg$group = "AL"
per = per[,c(3,4)]
per$group = "PER"
colnames(per)[2] = "democracy"
View(per)
democ = rbind(reg,per)
table(democ$group) #Todo bien!
View(democ)
ggplot(democ, aes(x=year, y=democracy, colour = group, group = group)) +
geom_line() +
labs(title = "Índice de democracia electoral - Perú y América Latina",
subtitle = "V-Dem",
x = "Año",
y = "Escala 0 - 1") +
guides(col=guide_legend("Grupo:")) +
theme_fivethirtyeight()
points = import("scatter_data.csv")
ggplot(points, aes(x=v2x_polyarchy, y=democracy)) + geom_point()
View(points)
p=ggplot(points, aes(x=v2x_polyarchy, y=democracy)) + geom_point() +
geom_point(size=1.5, shape=23) +
geom_text(label=points$pais, vjust=-0.5, hjust = 1,color="black", size=3) +
labs(title = "Apoyo a la democracia e índice de democracia electoral \nen América Latina y El Caribe",
subtitle = "Barómetro de las Américas y V-Dem",
x = "Índice de democracia electoral",
y = "Apoyo a la democracia") +
theme_fivethirtyeight()
p
points$atipico = factor(ifelse(points$pais == "Peru",1,0))
p=ggplot(points, aes(x=v2x_polyarchy, y=democracy, color = atipico)) + geom_point() +
geom_point(size=3, shape=20) +
geom_text(label=points$pais, vjust=-0.5, hjust = 1,color="black", size=3) +
labs(title = "Apoyo a la democracia e índice de democracia electoral \nen América Latina y El Caribe",
subtitle = "Barómetro de las Américas y V-Dem",
x = "Índice de democracia electoral",
y = "Apoyo a la democracia") +
scale_color_manual(values=c('Blue','Red')) +
theme_fivethirtyeight()
p+ theme(legend.position = "none") #Para que no se vea la leyenda
errorbars = import("parpol_age.csv")
View(errorbars)
ggplot(errorbars, aes(x=age, y=media, group=1, label = media)) +
geom_line() +
geom_errorbar(width=.1, aes(ymin=media-ci, ymax=media+ci))
errorbars$age = factor(errorbars$age, levels = c(1:6), labels = c("25 o menos", "Entre 26 y 35",
"Entre 36 y 45", "Entre 46 y 55",
"Entre 56 y 65","De 66 a más"))
ggplot(errorbars, aes(x=age, y=media, group=1, label = media)) +
geom_line() +
geom_errorbar(width=.1, aes(ymin=media-ci, ymax=media+ci))
ggplot(errorbars, aes(x=age, y=media, group=1, label = media)) +
geom_line() +
geom_errorbar(width=.1, aes(ymin=media-ci, ymax=media+ci)) +
geom_point(shape=21, size=3, fill="white") +
ylim(45,80)+
labs(x="Grupo etario",
y="Índice de participación")+
geom_text (aes(label=round(media,2)), vjust=-2, hjust = 1.3, color="black", size=4) +
scale_color_fivethirtyeight() +
theme_fivethirtyeight()
errorbars2 = import("parpol_wvs.csv")
View(errorbars2)
dens = import("EG_2021.csv")
pl = dens[dens$ganador == "PL",]
fp = dens[dens$ganador == "FP",]
ggplot(pl, aes(x=VALIDOS_PL, fill=VALIDOS_PL))  + theme(legend.position="bottom") +
geom_density(alpha=0.4, color="red", fill="red", linetype = "dashed")
ggplot(pl, aes(x=VALIDOS_PL, fill=VALIDOS_PL))  +
theme(legend.position="bottom") +
geom_density(alpha=0.4, color="red", fill="red", linetype = "dashed") +
ggtitle("Distritos ganados por Perú Libre") + xlab("Votos válidos") + ylab("Densidad") +
geom_vline(aes(xintercept=mean(VALIDOS_PL)), color="black", linetype="dashed", size=0.5)+
theme_fivethirtyeight()
ggplot(fp, aes(x=VALIDOS_FP, fill=VALIDOS_FP))  +
theme(legend.position="bottom") +
geom_density(alpha=0.4, color="orange", fill="orange", linetype = "dashed") +
ggtitle("Distritos ganados por Fuerza Popular") + xlab("Votos válidos") + ylab("Densidad") +
geom_vline(aes(xintercept=mean(VALIDOS_FP)),color="black", linetype="dashed", size=0.5) +
theme_fivethirtyeight()
View(dens)
#Solucionando el problema de los ubigeos:
dens$CCODI_UBIGEO=stringr::str_pad(dens$CCODI_UBIGEO, 6, side = "left", pad = 0)
dens$UBIGEO = substr(dens$CCODI_UBIGEO,1,2)
dens$UBIGEO = paste0(dens$UBIGEO, "0000")
map = dens %>%
group_by(DEPA,UBIGEO) %>%
summarise(PL_DEPA = sum(VOTOS_PL, na.rm = T),
FP_DEPA = sum(VOTOS_FP, na.rm = T))
map$total = map$PL_DEPA+map$FP_DEPA
map$FP_FREQ = map$FP_DEPA/map$total
map$PL_FREQ = map$PL_DEPA/map$total
map$VIC = factor(ifelse(map$PL_DEPA>map$FP_DEPA,1,0))
map$VIC = factor(map$VIC, levels = c(0:1), labels = c("FP","PL"))
library(sf)
mapDEP=sf::read_sf("DEPARTAMENTO.shp")
head(mapDEP) #Veamos la geometría:
mapDEP2=merge(mapDEP,map,by.x='DEPARTAMEN',by.y='DEPA', all.x = T)
head(mapDEP2)
library(rio)
link = "https://github.com/vvvalni/Proyecto-EAP-2/raw/main/Bases%20de%20Datos/data_final.xlsx"
PBIgen = import(link)
library(rio)
link = "https://github.com/vvvalni/Proyecto-EAP-2/raw/main/Bases%20de%20Datos/data_final.xlsx"
PBIgen = import(link)
modelo1=formula(pc2022~violencia)
reg1=lm(modelo1,data=PBIgen)
summary(reg1)
modelo2=formula(pc2022~violencia + escaños2019)
reg2=lm(modelo2,data=PBIgen)
summary(reg2)
modelo3=formula(pc2022~violencia + escaños2019 + restricción2019)
reg3=lm(modelo3,data=PBIgen)
summary(reg3)
modelo4=formula(pc2022~violencia + escaños2019 + restricción2019 + PT2022)
reg4=lm(modelo4,data=PBIgen)
summary(reg4)
View(PBIgen)
ggplot(PBIgen, aes(x=pais, y=pc2022)) +
geom_bar(stat = "identity") + coord_flip()
library(ggplot2)
ggplot(PBIgen, aes(x=pais, y=pc2022)) +
geom_bar(stat = "identity") + coord_flip()
knitr::include_graphics("logoPUCP.png")
knitr::include_graphics("formats.png")
library(rvest)
linkToWebIDE="https://en.wikipedia.org/wiki/List_of_national_independence_days"
xpathToTableIDE='//*[@id="mw-content-text"]/div[1]/table[2]'
data <- read_html(linkToWebIDE)%>%html_nodes(xpath = xpathToTableIDE)%>%html_table()%>% .[[1]]
head(data)
data$Date = paste(data$`Date of holiday`,data$`Year of event`)
data[1,8]
as.Date(data$Date, format = "%d %B %Y")
data$fechas=as.Date(data$Date, format = "%d %B %Y")
str(data)
as.Date(data$Date, format = "%d %B %Y")
data$fechas=as.Date(data$Date, format = "%d %B %Y")
str(data)
Sys.setlocale("LC_TIME", "English")
as.Date(data$Date, format = "%d %B %Y")
data$fechas=as.Date(data$Date, format = "%d %B %Y")
str(data)
data$act_date = as.Date("2023-11-02", format = "%Y-%m-%d")
head(data)
library(lubridate)
data$ind_years=interval(data$fechas,data$act_date) %/% years(1)
head(data)
View(data)
library(ggplot2)
ggplot(PBIgen, aes(x=País, y=pc2022)) +
geom_bar(stat = "identity") + coord_flip()
data$ind_months=interval(data$fechas,data$act_date) %/% months(1)
data$ind_weeks=interval(data$fechas,data$act_date) %/% weeks(1)
data$ind_days=interval(data$fechas,data$act_date) %/% days(1)
head(data[8:14])
data[which.min(data$ind_years),]
data[which.max(data$ind_years),]
data = data[-c(93),]
data[which.max(data$ind_years),]
dat1 <- read.csv("http://mgimond.github.io/ES218/Data/CO2.csv")
head(dat1)
#paste(dat1$Year,dat1$Month, sep="-")
#paste(dat1$Year, dat1$Month, "15", sep="-")
paste(dat1$Year,dat1$Month, sep="-")
paste(dat1$Year, dat1$Month, "15", sep="-")
knitr::include_graphics("fun.png")
dat1$nd = ymd(paste(dat1$Year, dat1$Month, "15", sep = "-"))
str(dat1$nd)
knitr::include_graphics("hours.png")
library(rio)
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
head(ventanillas)
ventanillas = ventanillas[,c(1,3,6:9)]
str(ventanillas)
names(ventanillas)
colnames(ventanillas) = c("VENTANILLA","TICKET","GENERACION","LLAMADA","ATENCION","FIN")
as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S") #Pone la fecha de hoy por defecto
ventanillas$GENER_TEST = as.POSIXct(ventanillas$GENERACION, format = "%H:%M:%S")
str(ventanillas$GENER_TEST)
ventanillas$day = ifelse(ventanillas$VENTANILLA == "VENTANILLA 1", "July 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 2", "May 21 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 3", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 4", "June 25 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 5", "June 2 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 6", "July 3 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 7", "May 5 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 8", "June 26 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 9", "May 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 10", "November 15 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 11", "June 8 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 12", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 13", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 14", "June 29 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 15", "November 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 16", "June 13 2021",
ifelse(ventanillas$VENTANILLA == "VENTANILLA 17", "May 22 2021",0)))))))))))))))))
View(ventanillas)
ventanillas$gen_fecha = paste(ventanillas$day, ventanillas$GENERACION)
ventanillas$gen_fecha=as.POSIXct(ventanillas$gen_fecha,format="%B %d %Y %H:%M:%S")
str(ventanillas$gen_fecha)
ventanillas$GENERACION = as.POSIXct(ventanillas$GENERACION, format ="%H:%M:%S")
ventanillas$LLAMADA = as.POSIXct(ventanillas$LLAMADA, format ="%H:%M:%S")
ventanillas$ATENCION = as.POSIXct(ventanillas$ATENCION, format ="%H:%M:%S")
ventanillas$FIN = as.POSIXct(ventanillas$FIN, format ="%H:%M:%S")
str(ventanillas)
ventanillas$diff = difftime(ventanillas$FIN,ventanillas$GENERACION, units="min") #secs si fueran segundos
ventanillas$secs = difftime(ventanillas$FIN,ventanillas$GENERACION, units="secs")
min(ventanillas$diff)
ventanillas[which.min(ventanillas$diff),]
max(ventanillas$diff)
ventanillas[which.max(ventanillas$diff),]
ventanillas$duracion=as.numeric(ventanillas$diff)
hist(ventanillas$duracion)
table(ventanillas$TICKET)
library(dplyr)
TICKETS = ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
library(dplyr)
TICKETS = ventanillas %>% group_by(TICKET) %>%
summarize(DURACION = mean(duracion, na.rm = T))
TICKETS[which.max(TICKETS$DURACION),]
TICKETS[which.min(TICKETS$DURACION),]
g2 = ggplot(dff, aes(x=reorder(País,pc2022), y=pc2022, fill = type)) +
geom_bar(position="dodge", stat="identity")+
coord_flip() +
geom_errorbar(aes(ymin=value-ci, ymax=value+ci), position = position_dodge(0.95), width= 0.2) +
labs(title = "Confianza y atención a los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "PBI per cápita") +
geom_text(aes(label=paste0(round(value,0),"%")), vjust=0.5, hjust = -0.8,color="black", size=3,
position = position_dodge(width = 1)) +
theme(legend.position="bottom") + labs(fill=' ') #Para la leyenda
g2 = ggplot(PBIgen, aes(x=reorder(País,pc2022), y=pc2022, fill = type)) +
geom_bar(position="dodge", stat="identity")+
coord_flip() +
geom_errorbar(aes(ymin=pc2022-ci, ymax=pc2022+ci), position = position_dodge(0.95), width= 0.2) +
labs(title = "Confianza y atención a los medios en las Américas",
subtitle = "Barómetro de las Américas",
x = " ",
y = "PBI per cápita") +
geom_text(aes(label=paste0(round(value,0),"%")), vjust=0.5, hjust = -0.8,color="black", size=3,
position = position_dodge(width = 1)) +
theme(legend.position="bottom") + labs(fill=' ') #Para la leyenda
g2
ADMIN = filter(TICKETS, grepl("DJ", TICKET))
ADMIN = ADMIN[complete.cases(ADMIN$DURACION),]
library(ggplot2)
ggplot(ADMIN, aes(x=reorder(TICKET,DURACION), y=DURACION), fill = select) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Duración promedio",
x = " ",
y = "Minutos") +
geom_hline(yintercept = mean(TICKETS$DURACION) ,linetype="dashed", color="blue",size=1)+
ylim(0, 90) +
geom_text(aes(label=paste0(round(DURACION,0)," mins")), vjust=0.5, hjust = 1.2,color="white", size=3)
ventanillas = import("https://github.com/Alexanderbenit7/EleccionesGenerales2021/blob/master/Santa%20Anita.csv?raw=true")
ventanillas = ventanillas[,c(1,3,6:9,10)]
colnames(ventanillas) = c("VENTANILLA","TICKET","GENERACION","LLAMADA","ATENCION","FIN","FECHA")
ventanillas$FECHA = substr(ventanillas$FECHA,1,8) #está la fecha de la atención
ventanillas$FECHA = substr(ventanillas$FECHA,1,8) #está la fecha de la atención
ventanillas$ATEN = paste(ventanillas$FECHA, ventanillas$GENERACION)
ventanillas$ATEN= as.POSIXct(ventanillas$ATEN,format="%d/%m/%y %H:%M:%S")
ventanillas$day=weekdays(ventanillas$ATEN, abbreviate = F) #nos quedamos con el día
ventanillas$hour = substr(ventanillas$ATEN,12,13) #nos quedamos con la hora
tiempos_Fecha = ventanillas %>%
group_by(day, hour) %>%
summarise(ATENCIONES = n ())
tiempos_Fecha = ventanillas %>%
group_by(day, hour) %>%
summarise(ATENCIONES = n ())
dow_format <- c("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday")
tiempos_Fecha$day <- factor(tiempos_Fecha$day, level = rev(dow_format))
ggplot(tiempos_Fecha, aes(x = hour, y = day, fill = ATENCIONES)) +
geom_tile() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6), legend.title = element_blank(),
legend.position="top", legend.direction="horizontal", legend.key.width=unit(2, "cm"),
legend.key.height=unit(0.25, "cm")) +
labs(x = "Hora de atencion", y = "Dia de la semana", title = "Numero de atenciones")+
scale_fill_gradient(low = "white", high = "#27AE60") +
theme(panel.background=element_rect(fill = "white", colour = "black"))+
theme(plot.title = element_text(hjust = 0.5))
data = import("https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/blob/master/DATA/pavimentando%20con%20votos.sav?raw=true")
#Veamos cómo está formateada:
str(data$pctopo)
summary(data$pctopo)
hist(data$pctopo)
data$cortes_pctopo = factor(ifelse(data$pctopo>50,1,0))
data$cortes_pctopo = factor(data$cortes_pctopo, levels = c(0:1), labels = c("La mitad o menos","Más de la mitad")) #Asignando nombres a las categorías
library(dplyr)
data = mutate(data, cortes_pctopo_2 = ifelse(pctopo>50,1,0))
data$cortes_pctopo_2 = factor(data$cortes_pctopo_2, levels = c(0:1), labels = c("La mitad o menos","Más de la mitad"))
table(data$cortes_pctopo_2)
data$cat_dob = ifelse(data$pctopo > 50 & data$priorizado == 1, 1, #Ojo que son dos condiciones, por eso el &
ifelse(data$pctopo > 50 & data$priorizado == 0,2,
ifelse(data$pctopo <= 50 & data$priorizado == 1,3,
ifelse(data$pctopo <= 50 & data$priorizado == 0,4,0))))
data$cat_dob = factor(data$cat_dob, levels = c(1:4), labels = c("Más del 50% y priorizado",
"Más del 50% y no priorizado",
"La mitad o menos y priorizado",
"La mitad o menos y no priorizado"))
table(data$cat_dob)
barplot(table(data$cat_dob))
str(data$nbi)
summary(data$nbi)
breaks_nbi = c(0,20,40,60,80,100)
labels_nbi = c("Muy insatisfechas","Insatisfechas","Medianamente satisfechas","Satisfechas","Altamente satisfechas")
data$int_nbi = cut(data$nbi,
breaks = breaks_nbi,
labels = labels_nbi,
oredered_result = T)
table(data$int_nbi)
barplot(table(data$int_nbi))
breaks_nbi = 5
labels_nbi = c("Muy insatisfechas","Insatisfechas","Medianamente satisfechas","Satisfechas","Altamente satisfechas")
data$int_nbi = cut(data$nbi,
breaks = breaks_nbi,
labels = labels_nbi,
oredered_result = T)
table(data$int_nbi)
barplot(table(data$int_nbi))
data_idh = import("https://github.com/PoliticayGobiernoPUCP/estadistica_anapol2/raw/master/DATA/idh_elec.csv")
prov_idh = tapply(data_idh$idh, data_idh$prov, mean, na.rm = T)
prov_idh = as.data.frame(prov_idh)
prov_idh
reg_idh = tapply(data_idh$idh, data_idh$depa, mean, na.rm = T)
reg_idh = as.data.frame(reg_idh)
reg_idh
knitr::include_graphics("cbind.png")
reg_idh = tapply(data_idh$idh, data_idh$depa, mean, na.rm = T)
reg_pbi = tapply(data_idh$percapitaf, data_idh$depa, mean, na.rm = T)
group = as.data.frame(cbind(reg_idh, reg_pbi)) #Cuidado cuando hay casos perdidos y usan cbind!!
group
plot(group$reg_idh, group$reg_pbi)
aggregate(data_idh[,c(8)], by = list(data_idh[,4]), mean) #idh
aggregate(data_idh[,c(8,12)], by = list(data_idh[,4]), mean) #idh y pbi per capita
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE), #media
min_idh_reg = min(idh, na.rm = TRUE), #idh mínimo de la región
max_idh_reg = max(idh, na.rm = TRUE), #idh máximo de la región
median_idh = median(idh, na.rm = TRUE)) #mediana
pob_reg=data_idh %>%
group_by(depa) %>%
summarise(pob_reg = sum(pobla, na.rm = T))
pob_reg
ppk_reg=data_idh %>%
group_by(depa) %>%
summarise(ppk_reg = sum(PPK, na.rm = T)) #para los conteos
ppk_reg
total = merge(pob_reg, ppk_reg, by = "depa")
total$prop_ppk = (total$ppk_reg/total$pob_reg)*100
View(total)
total$prop_ppk = (total$ppk_reg/total$pob_reg)*100
idh_reg = data_idh %>%
group_by(depa) %>%
summarize(mean_idh = mean(idh, na.rm = TRUE))
View(idh_reg)
total = merge(total,idh_reg, by = "depa")
View(total)
plot(total$prop_ppk, total$mean_idh)
dis_reg = data_idh %>%
group_by(depa) %>%
summarise(count = n())
dis_reg
sum(dis_reg$count) #verificamos
library(flexdashboard)
data = import("finalData.csv")
setwd("C:/Users/VALERIA/OneDrive/Escritorio/Estadistica-2-Practicas/S9/ERM2018-master")
data = import("finalData.csv")
data = import("ERM2018-master/finalData.csv")
data = import("ERM2018-master/finalData.csv")
data = import("ERM2018-master/finalData.csv")
setwd("C:/Users/VALERIA/OneDrive/Escritorio/Estadistica-2-Practicas/S9/ERM2018-master/ERM2018-master")
data = import("ERM2018-master/finalData.csv")
data = import("finalData.csv")
data = import("finalData.csv")
data = import("finalData.csv")
setwd("C:/Users/VALERIA/OneDrive/Escritorio/Estadistica-2-Practicas/S9/ERM2018-master/ERM2018-master")
data = import("finalData.csv")
library(rio)
library(ggplot2)
library(DT)
library(kableExtra)
library(modelsummary)
data = import("finalData.csv")
data = import("finalData.csv")
data = import("finalData.csv")
library(flexdashboard)
library(rio)
library(ggplot2)
library(DT)
library(kableExtra)
library(modelsummary)
data = import("finalData.csv")
mapDIS=sf::read_sf("shapes/Lima.shp") #shapefile
#Juntamos información con el shape:
mapDIS2=merge(mapDIS,data,by.x='IDDIST',by.y='UBIGEO', all.x = T) #siempre primero el shape
mapaleyendaL= ggplot(mapDIS2)+ geom_sf() + theme_light()
mapaleyL= mapaleyendaL + geom_sf(data=mapDIS2,
aes(fill=GANADOR),color = "gray")
mapa1= mapaleyL +
coord_sf() +
scale_fill_manual(values=c("firebrick","dodgerblue2")) + theme_void() +
theme(axis.title = element_blank(), axis.text = element_blank(), legend.position = "bottom") + labs(fill=" ") + theme(legend.text = element_text(size = 8)) +
labs(title = "Victoria a nivel distrital") +
theme(
plot.title = element_text(color="black", size=11, face="bold"))
mapa1
View(data)
